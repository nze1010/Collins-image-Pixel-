<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collins IMAGE Pixel</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
    </style>
</head>
<body class="bg-gray-900">
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useRef, useEffect } = React;

        // --- ICONS ---
        const FillIcon = ({ path, className = "w-6 h-6" }) => (
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
            <path fillRule="evenodd" d={path} clipRule="evenodd" />
          </svg>
        );
        const SparklesIcon = "M10.788 3.212a.75.75 0 00-1.576 0l-1.25 4.542a.75.75 0 01-.564.564l-4.542 1.25a.75.75 0 000 1.576l4.542 1.25a.75.75 0 01.564.564l1.25 4.542a.75.75 0 001.576 0l1.25-4.542a.75.75 0 01.564-.564l4.542-1.25a.75.75 0 000-1.576l-4.542-1.25a.75.75 0 01-.564-.564L10.788 3.212zM15.188 15.188a.75.75 0 00-1.576 0l-.625 2.27a.75.75 0 01-.564.565l-2.27.625a.75.75 0 000 1.576l2.27.625a.75.75 0 01.564.564l.625 2.27a.75.75 0 001.576 0l.625-2.27a.75.75 0 01.564-.564l2.27-.625a.75.75 0 000-1.576l-2.27-.625a.75.75 0 01-.564-.564l-.625-2.27z";
        const ChatBubbleIcon = "M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72.235.165.73c.196.867-.324 1.733-1.225 1.941a2.35 2.35 0 01-2.42-.51l-3.094-3.093a.75.75 0 00-.53-.22H6.75a2.25 2.25 0 01-2.25-2.25V6.75a2.25 2.25 0 012.25-2.25h9a2.25 2.25 0 012.25 2.25v1.761z";
        const CloseIcon = "M6.28 5.22a.75.75 0 00-1.06 1.06L10.94 12l-5.72 5.72a.75.75 0 101.06 1.06L12 13.06l5.72 5.72a.75.75 0 101.06-1.06L13.06 12l5.72-5.72a.75.75 0 00-1.06-1.06L12 10.94 6.28 5.22z";
        const ArrowDownTrayIcon = "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3";
        const PaperAirplaneIcon = "M6.429 9.062a.75.75 0 01.355-.355l8.25-3.375a.75.75 0 01.912.912l-3.375 8.25a.75.75 0 01-.355.355l-2.625.938a.75.75 0 01-.912-.912l.938-2.625zM15.188 15.188l2.625-1.063-8.25-3.375-1.063 2.625 6.688 1.813z";

        // --- Reusable Components ---
        const LoadingSpinner = ({ text }) => (
            <div className="flex flex-col items-center justify-center space-y-4 text-white">
                <div className="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-purple-400"></div>
                <p className="font-semibold">{text}</p>
            </div>
        );

        const MainButton = ({ onClick, disabled, children, className = '' }) => (
            <button
                onClick={onClick}
                disabled={disabled}
                className={`flex items-center justify-center bg-gradient-to-r from-purple-600 to-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:from-purple-700 hover:to-blue-700 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-lg ${className}`}
            >
                {children}
            </button>
        );
        
        const ChatbotWidget = ({ isVisible, onClose }) => {
            const [messages, setMessages] = useState([{ role: 'assistant', content: "Hi! I'm Collins, your powerful creative assistant. How can I help you today?" }]);
            const [input, setInput] = useState('');
            const [isTyping, setIsTyping] = useState(false);
            const messagesEndRef = useRef(null);

            useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages]);

            const handleSendMessage = async (e) => {
                e.preventDefault();
                if (!input.trim() || isTyping) return;

                const userMessage = { role: 'user', content: input };
                setMessages(prev => [...prev, userMessage]);
                setInput('');
                setIsTyping(true);
                
                const systemPrompt = `You are a highly intelligent and creative assistant named Collins. You are an expert in art, creative writing, and the technical details of AI image generation. Your purpose is to provide insightful, detailed, and helpful answers to user questions. Be friendly, powerful, and smart in your responses.`;
                const chatHistory = [
                    { role: "user", parts: [{ text: systemPrompt }] },
                    { role: "model", parts: [{ text: "Understood. I am Collins, the powerful AI assistant."}] },
                    ...messages.map(m => ({ role: m.role === 'assistant' ? 'model' : 'user', parts: [{ text: m.content }] })),
                    { role: 'user', parts: [{ text: input }] }
                ];

                try {
                    const payload = { contents: chatHistory };
                    const apiKey = ""; 
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    const text = result.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I had trouble thinking of a response.';
                    setMessages(prev => [...prev, { role: 'assistant', content: text }]);
                } catch (error) {
                    console.error("Chatbot API error:", error);
                    setMessages(prev => [...prev, { role: 'assistant', content: "I'm having a little trouble connecting right now. Please try again." }]);
                } finally {
                    setIsTyping(false);
                }
            };
            
            if (!isVisible) return null;

            return (
                <div className="fixed bottom-24 right-5 w-80 h-[28rem] bg-gray-900/80 backdrop-blur-md border border-purple-500/30 rounded-lg shadow-2xl flex flex-col z-50 transition-all duration-300">
                    <header className="flex items-center justify-between p-3 border-b border-purple-500/30">
                        <h3 className="font-bold text-white">Chat with Collins</h3>
                        <button onClick={onClose} className="text-gray-400 hover:text-white"><FillIcon path={CloseIcon} className="w-5 h-5"/></button>
                    </header>
                    <div className="flex-1 p-4 overflow-y-auto space-y-4">
                        {messages.map((msg, index) => (
                            <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`max-w-[80%] rounded-lg px-3 py-2 ${msg.role === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-200'}`}>{msg.content}</div>
                            </div>
                        ))}
                        {isTyping && ( <div className="flex justify-start"><div className="bg-gray-700 text-gray-200 rounded-lg px-3 py-2"><div className="flex items-center space-x-1"><span className="w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-75"></span><span className="w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-150"></span><span className="w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-300"></span></div></div></div>)}
                        <div ref={messagesEndRef} />
                    </div>
                    <form onSubmit={handleSendMessage} className="p-3 border-t border-purple-500/30 flex items-center">
                        <input type="text" value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask Collins anything..." className="flex-1 bg-gray-800 text-white placeholder-gray-500 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-purple-500" />
                        <button type="submit" className="ml-2 text-purple-400 hover:text-purple-300 disabled:text-gray-600" disabled={isTyping}><FillIcon path={PaperAirplaneIcon} className="w-6 h-6"/></button>
                    </form>
                </div>
            );
        };

        // --- Main App ---
        function App() {
            const [mode, setMode] = useState('thumbnail'); // Default to thumbnail
            const [error, setError] = useState(null);
            const [isChatVisible, setIsChatVisible] = useState(false);

            const Header = () => (
                <header className="text-center mb-8 md:mb-12">
                    <h1 className="text-4xl md:text-6xl font-black bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400 py-2">
                        Collins IMAGE Pixel
                    </h1>
                    <p className="text-gray-400 mt-2 text-lg">Your AI-Powered Creative Studio</p>
                    <nav className="mt-8 flex justify-center">
                        <div className="flex items-center gap-2 bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg p-1">
                            <button onClick={() => setMode('creative')} className={`px-4 py-2 text-sm font-semibold rounded-md transition-colors ${mode === 'creative' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'}`}>
                                Creative Generator
                            </button>
                            <button onClick={() => setMode('thumbnail')} className={`px-4 py-2 text-sm font-semibold rounded-md transition-colors ${mode === 'thumbnail' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'}`}>
                                YouTube Thumbnail
                            </button>
                        </div>
                    </nav>
                </header>
            );
            
            return (
                <div className="relative min-h-screen w-full bg-gray-900 text-white overflow-hidden p-4">
                    <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900"></div>
                    <main className="relative z-10 flex flex-col items-center justify-start min-h-screen pt-8">
                        <Header />
                        {error && <div className="my-4 p-3 bg-red-500/20 border border-red-500 text-red-300 rounded-lg max-w-2xl text-center animate-pulse">{error}</div>}
                        {mode === 'creative' ? <CreativeGenerator setError={setError} /> : <ThumbnailGenerator setError={setError} />}
                    </main>
                    <button onClick={() => setIsChatVisible(v => !v)} className="fixed bottom-5 right-5 h-16 w-16 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full flex items-center justify-center text-white font-semibold shadow-lg transform hover:scale-110 transition-transform duration-300 z-50" title="Chat with Collins">
                        <FillIcon path={ChatBubbleIcon} className="w-8 h-8" />
                    </button>
                    <ChatbotWidget isVisible={isChatVisible} onClose={() => setIsChatVisible(false)} />
                </div>
            );
        }

        // --- Creative Image Generator ---
        function CreativeGenerator({ setError }) {
            const [prompt, setPrompt] = useState('');
            const [imageSrc, setImageSrc] = useState('');
            const [isGenerating, setIsGenerating] = useState(false);
            
            const generateImage = async () => {
                if (!prompt.trim()) { setError('Please enter a prompt.'); return; }
                setIsGenerating(true); setError(null); setImageSrc('');
                try {
                    const payload = { instances: [{ prompt: prompt }], parameters: { "sampleCount": 1 } };
                    const apiKey = ""; const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`); }
                    const result = await response.json();
                    if (result.predictions?.[0]?.bytesBase64Encoded) { setImageSrc(`data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`); } 
                    else { throw new Error('Image data not found in API response.'); }
                } catch(err) {
                    setError(err.message);
                } finally {
                    setIsGenerating(false);
                }
            };

            return (
                 <div className="w-full max-w-3xl mx-auto animate-fade-in">
                    <div className="flex gap-2 mb-4">
                        <input type="text" value={prompt} onChange={(e) => setPrompt(e.target.value)} placeholder="A hyperrealistic portrait of a futuristic warrior..." className="flex-grow p-4 bg-gray-800/70 border-2 border-gray-700 rounded-lg focus:ring-2 focus:ring-purple-500 transition-all text-white placeholder-gray-500" disabled={isGenerating} />
                        <MainButton onClick={generateImage} disabled={isGenerating}>
                            <FillIcon path={SparklesIcon} className="w-5 h-5 mr-2" /> Generate
                        </MainButton>
                    </div>
                    <div className="w-full aspect-video bg-black/30 border-2 border-dashed border-gray-700 rounded-lg flex items-center justify-center overflow-hidden">
                        {isGenerating ? <LoadingSpinner text="Generating masterpiece..." /> : imageSrc ? <img src={imageSrc} alt={prompt} className="w-full h-full object-contain" /> : <div className="text-gray-500">Your image will appear here</div>}
                    </div>
                </div>
            );
        }

        // --- YouTube Thumbnail Generator ---
        function ThumbnailGenerator({ setError }) {
            const [prompt, setPrompt] = useState('');
            const [thumbnailSrc, setThumbnailSrc] = useState('');
            const [isGenerating, setIsGenerating] = useState(false);

            const generateThumbnail = async () => {
                if (!prompt.trim()) { setError('Please describe the thumbnail you want to create.'); return; }
                setIsGenerating(true); setError(null); setThumbnailSrc('');
                try {
                    const fullPrompt = `Create a visually striking YouTube thumbnail with a 16:9 aspect ratio. The thumbnail should be based on the following description: "${prompt}". The text should be bold, clear, and easy to read.`;
                    const payload = { instances: [{ prompt: fullPrompt }], parameters: { "sampleCount": 1 } };
                    const apiKey = ""; const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`); }
                    const result = await response.json();
                    if (result.predictions?.[0]?.bytesBase64Encoded) { setThumbnailSrc(`data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`); } 
                    else { throw new Error('Thumbnail image not found in API response.'); }
                } catch(err) {
                    setError(err.message);
                } finally {
                    setIsGenerating(false);
                }
            };
            
            const downloadThumbnail = () => {
                if (!thumbnailSrc) return;
                const link = document.createElement('a');
                link.download = 'thumbnail.png';
                link.href = thumbnailSrc;
                link.click();
            };

            return (
                <div className="w-full max-w-4xl mx-auto animate-fade-in">
                    <div className="space-y-4">
                        <div>
                            <label className="font-semibold text-lg text-gray-300 mb-2 block">Describe your thumbnail</label>
                            <textarea 
                                value={prompt} 
                                onChange={(e) => setPrompt(e.target.value)} 
                                rows="4" 
                                placeholder="e.g., A vibrant thumbnail for a cooking video. The title 'EASY JOLLOF RICE' in big yellow letters. A delicious-looking plate of Jollof rice in the background with a Nigerian flag icon." 
                                className="w-full p-4 bg-gray-800/70 border-2 border-gray-700 rounded-lg focus:ring-2 focus:ring-purple-500 transition-all text-white placeholder-gray-500"
                            ></textarea>
                        </div>
                        <MainButton onClick={generateThumbnail} disabled={isGenerating} className="w-full">
                            <FillIcon path={SparklesIcon} className="w-6 h-6 mr-2" />
                            {isGenerating ? 'Generating Your Thumbnail...' : 'Generate Thumbnail'}
                        </MainButton>
                    </div>

                    <div className="mt-8">
                        <h3 className="text-2xl font-bold mb-4 text-center">Generated Thumbnail</h3>
                        <div className="w-full aspect-video bg-black/30 border-2 border-dashed border-gray-700 rounded-lg flex items-center justify-center overflow-hidden">
                            {isGenerating ? <LoadingSpinner text="Creating your thumbnail..." /> : thumbnailSrc ? <img src={thumbnailSrc} alt="Generated YouTube Thumbnail" className="w-full h-full object-cover" /> : <div className="text-gray-500 text-center p-4">Your generated thumbnail will appear here.</div>}
                        </div>
                         <MainButton onClick={downloadThumbnail} disabled={!thumbnailSrc || isGenerating} className="w-full mt-4">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6 mr-2"><path d={ArrowDownTrayIcon} /></svg>
                            Download Thumbnail
                        </MainButton>
                    </div>
                </div>
            );
        }

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);
    </script>
</body>
</html>
